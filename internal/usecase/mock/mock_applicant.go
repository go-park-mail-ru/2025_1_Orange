// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase (interfaces: Applicant)
//
// Generated by this command:
//
//	mockgen -package mock -destination ./internal/usecase/mock/mock_applicant.go ./internal/usecase Applicant
//

// Package mock is a generated GoMock package.
package mock

import (
	dto "ResuMatch/internal/entity/dto"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockApplicant is a mock of Applicant interface.
type MockApplicant struct {
	ctrl     *gomock.Controller
	recorder *MockApplicantMockRecorder
	isgomock struct{}
}

// MockApplicantMockRecorder is the mock recorder for MockApplicant.
type MockApplicantMockRecorder struct {
	mock *MockApplicant
}

// NewMockApplicant creates a new mock instance.
func NewMockApplicant(ctrl *gomock.Controller) *MockApplicant {
	mock := &MockApplicant{ctrl: ctrl}
	mock.recorder = &MockApplicantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicant) EXPECT() *MockApplicantMockRecorder {
	return m.recorder
}

// EmailExists mocks base method.
func (m *MockApplicant) EmailExists(arg0 context.Context, arg1 string) (*dto.EmailExistsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailExists", arg0, arg1)
	ret0, _ := ret[0].(*dto.EmailExistsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmailExists indicates an expected call of EmailExists.
func (mr *MockApplicantMockRecorder) EmailExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailExists", reflect.TypeOf((*MockApplicant)(nil).EmailExists), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockApplicant) GetUser(arg0 context.Context, arg1 int) (*dto.ApplicantProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*dto.ApplicantProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockApplicantMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockApplicant)(nil).GetUser), arg0, arg1)
}

// Login mocks base method.
func (m *MockApplicant) Login(arg0 context.Context, arg1 *dto.Login) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockApplicantMockRecorder) Login(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockApplicant)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockApplicant) Register(arg0 context.Context, arg1 *dto.ApplicantRegister) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockApplicantMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockApplicant)(nil).Register), arg0, arg1)
}

// UpdateAvatar mocks base method.
func (m *MockApplicant) UpdateAvatar(arg0 context.Context, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatar", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAvatar indicates an expected call of UpdateAvatar.
func (mr *MockApplicantMockRecorder) UpdateAvatar(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockApplicant)(nil).UpdateAvatar), arg0, arg1, arg2)
}

// UpdateProfile mocks base method.
func (m *MockApplicant) UpdateProfile(arg0 context.Context, arg1 int, arg2 *dto.ApplicantProfileUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockApplicantMockRecorder) UpdateProfile(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockApplicant)(nil).UpdateProfile), arg0, arg1, arg2)
}
