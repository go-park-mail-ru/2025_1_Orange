// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase (interfaces: Auth)
//
// Generated by this command:
//
//	mockgen -package mock -destination ./internal/usecase/mock/mock_auth.go ./internal/usecase Auth
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
	isgomock struct{}
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockAuth) CreateSession(ctx context.Context, userID int, role string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, userID, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockAuthMockRecorder) CreateSession(ctx, userID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAuth)(nil).CreateSession), ctx, userID, role)
}

// GetUserIDBySession mocks base method.
func (m *MockAuth) GetUserIDBySession(ctx context.Context, session string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDBySession", ctx, session)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserIDBySession indicates an expected call of GetUserIDBySession.
func (mr *MockAuthMockRecorder) GetUserIDBySession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDBySession", reflect.TypeOf((*MockAuth)(nil).GetUserIDBySession), ctx, session)
}

// Logout mocks base method.
func (m *MockAuth) Logout(ctx context.Context, session string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthMockRecorder) Logout(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuth)(nil).Logout), ctx, session)
}

// LogoutAll mocks base method.
func (m *MockAuth) LogoutAll(ctx context.Context, userID int, role string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutAll", ctx, userID, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutAll indicates an expected call of LogoutAll.
func (mr *MockAuthMockRecorder) LogoutAll(ctx, userID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutAll", reflect.TypeOf((*MockAuth)(nil).LogoutAll), ctx, userID, role)
}
