// Code generated by MockGen. DO NOT EDIT.
// Source: ResuMatch/internal/usecase (interfaces: Vacancy)
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/usecase/mock/mock_vacancy.go ResuMatch/internal/usecase Vacancy
//

// Package mock is a generated GoMock package.
package mock

import (
	entity "ResuMatch/internal/entity"
	dto "ResuMatch/internal/entity/dto"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVacancy is a mock of Vacancy interface.
type MockVacancy struct {
	ctrl     *gomock.Controller
	recorder *MockVacancyMockRecorder
	isgomock struct{}
}

// MockVacancyMockRecorder is the mock recorder for MockVacancy.
type MockVacancyMockRecorder struct {
	mock *MockVacancy
}

// NewMockVacancy creates a new mock instance.
func NewMockVacancy(ctrl *gomock.Controller) *MockVacancy {
	mock := &MockVacancy{ctrl: ctrl}
	mock.recorder = &MockVacancyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVacancy) EXPECT() *MockVacancyMockRecorder {
	return m.recorder
}

// ApplyToVacancy mocks base method.
func (m *MockVacancy) ApplyToVacancy(ctx context.Context, vacancyID, applicantID int) (*entity.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyToVacancy", ctx, vacancyID, applicantID)
	ret0, _ := ret[0].(*entity.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyToVacancy indicates an expected call of ApplyToVacancy.
func (mr *MockVacancyMockRecorder) ApplyToVacancy(ctx, vacancyID, applicantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyToVacancy", reflect.TypeOf((*MockVacancy)(nil).ApplyToVacancy), ctx, vacancyID, applicantID)
}

// CreateVacancy mocks base method.
func (m *MockVacancy) CreateVacancy(ctx context.Context, employerID int, createReq *dto.VacancyCreate) (*dto.VacancyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVacancy", ctx, employerID, createReq)
	ret0, _ := ret[0].(*dto.VacancyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVacancy indicates an expected call of CreateVacancy.
func (mr *MockVacancyMockRecorder) CreateVacancy(ctx, employerID, createReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVacancy", reflect.TypeOf((*MockVacancy)(nil).CreateVacancy), ctx, employerID, createReq)
}

// DeleteVacancy mocks base method.
func (m *MockVacancy) DeleteVacancy(ctx context.Context, id, employerID int) (*dto.DeleteVacancy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVacancy", ctx, id, employerID)
	ret0, _ := ret[0].(*dto.DeleteVacancy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVacancy indicates an expected call of DeleteVacancy.
func (mr *MockVacancyMockRecorder) DeleteVacancy(ctx, id, employerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVacancy", reflect.TypeOf((*MockVacancy)(nil).DeleteVacancy), ctx, id, employerID)
}

// GetActiveVacanciesByEmployerID mocks base method.
func (m *MockVacancy) GetActiveVacanciesByEmployerID(ctx context.Context, employerID, userID int, userRole string, limit, offset int) ([]dto.VacancyShortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveVacanciesByEmployerID", ctx, employerID, userID, userRole, limit, offset)
	ret0, _ := ret[0].([]dto.VacancyShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveVacanciesByEmployerID indicates an expected call of GetActiveVacanciesByEmployerID.
func (mr *MockVacancyMockRecorder) GetActiveVacanciesByEmployerID(ctx, employerID, userID, userRole, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveVacanciesByEmployerID", reflect.TypeOf((*MockVacancy)(nil).GetActiveVacanciesByEmployerID), ctx, employerID, userID, userRole, limit, offset)
}

// GetAll mocks base method.
func (m *MockVacancy) GetAll(ctx context.Context, currentUserID int, userRole string, limit, offset int) ([]dto.VacancyShortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, currentUserID, userRole, limit, offset)
	ret0, _ := ret[0].([]dto.VacancyShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockVacancyMockRecorder) GetAll(ctx, currentUserID, userRole, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockVacancy)(nil).GetAll), ctx, currentUserID, userRole, limit, offset)
}

// GetLikedVacancies mocks base method.
func (m *MockVacancy) GetLikedVacancies(ctx context.Context, applicantID, limit, offset int) ([]dto.VacancyShortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikedVacancies", ctx, applicantID, limit, offset)
	ret0, _ := ret[0].([]dto.VacancyShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikedVacancies indicates an expected call of GetLikedVacancies.
func (mr *MockVacancyMockRecorder) GetLikedVacancies(ctx, applicantID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikedVacancies", reflect.TypeOf((*MockVacancy)(nil).GetLikedVacancies), ctx, applicantID, limit, offset)
}

// GetVacanciesByApplicantID mocks base method.
func (m *MockVacancy) GetVacanciesByApplicantID(ctx context.Context, applicantID, limit, offset int) ([]dto.VacancyShortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVacanciesByApplicantID", ctx, applicantID, limit, offset)
	ret0, _ := ret[0].([]dto.VacancyShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVacanciesByApplicantID indicates an expected call of GetVacanciesByApplicantID.
func (mr *MockVacancyMockRecorder) GetVacanciesByApplicantID(ctx, applicantID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVacanciesByApplicantID", reflect.TypeOf((*MockVacancy)(nil).GetVacanciesByApplicantID), ctx, applicantID, limit, offset)
}

// GetVacancy mocks base method.
func (m *MockVacancy) GetVacancy(ctx context.Context, id, currentUserID int, userRole string) (*dto.VacancyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVacancy", ctx, id, currentUserID, userRole)
	ret0, _ := ret[0].(*dto.VacancyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVacancy indicates an expected call of GetVacancy.
func (mr *MockVacancyMockRecorder) GetVacancy(ctx, id, currentUserID, userRole any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVacancy", reflect.TypeOf((*MockVacancy)(nil).GetVacancy), ctx, id, currentUserID, userRole)
}

// LikeVacancy mocks base method.
func (m *MockVacancy) LikeVacancy(ctx context.Context, vacancyID, applicantID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeVacancy", ctx, vacancyID, applicantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeVacancy indicates an expected call of LikeVacancy.
func (mr *MockVacancyMockRecorder) LikeVacancy(ctx, vacancyID, applicantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeVacancy", reflect.TypeOf((*MockVacancy)(nil).LikeVacancy), ctx, vacancyID, applicantID)
}

// SearchVacancies mocks base method.
func (m *MockVacancy) SearchVacancies(ctx context.Context, userID int, userRole, searchQuery string, limit, offset int) ([]dto.VacancyShortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVacancies", ctx, userID, userRole, searchQuery, limit, offset)
	ret0, _ := ret[0].([]dto.VacancyShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchVacancies indicates an expected call of SearchVacancies.
func (mr *MockVacancyMockRecorder) SearchVacancies(ctx, userID, userRole, searchQuery, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVacancies", reflect.TypeOf((*MockVacancy)(nil).SearchVacancies), ctx, userID, userRole, searchQuery, limit, offset)
}

// SearchVacanciesByQueryAndSpecializations mocks base method.
func (m *MockVacancy) SearchVacanciesByQueryAndSpecializations(ctx context.Context, userID int, userRole, searchQuery string, specializations []string, limit, offset int) ([]dto.VacancyShortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVacanciesByQueryAndSpecializations", ctx, userID, userRole, searchQuery, specializations, limit, offset)
	ret0, _ := ret[0].([]dto.VacancyShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchVacanciesByQueryAndSpecializations indicates an expected call of SearchVacanciesByQueryAndSpecializations.
func (mr *MockVacancyMockRecorder) SearchVacanciesByQueryAndSpecializations(ctx, userID, userRole, searchQuery, specializations, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVacanciesByQueryAndSpecializations", reflect.TypeOf((*MockVacancy)(nil).SearchVacanciesByQueryAndSpecializations), ctx, userID, userRole, searchQuery, specializations, limit, offset)
}

// SearchVacanciesBySpecializations mocks base method.
func (m *MockVacancy) SearchVacanciesBySpecializations(ctx context.Context, userID int, userRole string, specializations []string, limit, offset int) ([]dto.VacancyShortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVacanciesBySpecializations", ctx, userID, userRole, specializations, limit, offset)
	ret0, _ := ret[0].([]dto.VacancyShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchVacanciesBySpecializations indicates an expected call of SearchVacanciesBySpecializations.
func (mr *MockVacancyMockRecorder) SearchVacanciesBySpecializations(ctx, userID, userRole, specializations, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVacanciesBySpecializations", reflect.TypeOf((*MockVacancy)(nil).SearchVacanciesBySpecializations), ctx, userID, userRole, specializations, limit, offset)
}

// UpdateVacancy mocks base method.
func (m *MockVacancy) UpdateVacancy(ctx context.Context, id, employerID int, request *dto.VacancyUpdate) (*dto.VacancyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVacancy", ctx, id, employerID, request)
	ret0, _ := ret[0].(*dto.VacancyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVacancy indicates an expected call of UpdateVacancy.
func (mr *MockVacancyMockRecorder) UpdateVacancy(ctx, id, employerID, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVacancy", reflect.TypeOf((*MockVacancy)(nil).UpdateVacancy), ctx, id, employerID, request)
}
