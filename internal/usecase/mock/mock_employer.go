// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase (interfaces: Employer)
//
// Generated by this command:
//
//	mockgen -package mock -destination ./internal/usecase/mock/mock_employer.go ./internal/usecase Employer
//

// Package mock is a generated GoMock package.
package mock

import (
	dto "ResuMatch/internal/entity/dto"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmployer is a mock of Employer interface.
type MockEmployer struct {
	ctrl     *gomock.Controller
	recorder *MockEmployerMockRecorder
	isgomock struct{}
}

// MockEmployerMockRecorder is the mock recorder for MockEmployer.
type MockEmployerMockRecorder struct {
	mock *MockEmployer
}

// NewMockEmployer creates a new mock instance.
func NewMockEmployer(ctrl *gomock.Controller) *MockEmployer {
	mock := &MockEmployer{ctrl: ctrl}
	mock.recorder = &MockEmployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployer) EXPECT() *MockEmployerMockRecorder {
	return m.recorder
}

// EmailExists mocks base method.
func (m *MockEmployer) EmailExists(arg0 context.Context, arg1 string) (*dto.EmailExistsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailExists", arg0, arg1)
	ret0, _ := ret[0].(*dto.EmailExistsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmailExists indicates an expected call of EmailExists.
func (mr *MockEmployerMockRecorder) EmailExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailExists", reflect.TypeOf((*MockEmployer)(nil).EmailExists), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockEmployer) GetUser(arg0 context.Context, arg1 int) (*dto.EmployerProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*dto.EmployerProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockEmployerMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockEmployer)(nil).GetUser), arg0, arg1)
}

// Login mocks base method.
func (m *MockEmployer) Login(arg0 context.Context, arg1 *dto.Login) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockEmployerMockRecorder) Login(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockEmployer)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockEmployer) Register(arg0 context.Context, arg1 *dto.EmployerRegister) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockEmployerMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockEmployer)(nil).Register), arg0, arg1)
}

// UpdateLogo mocks base method.
func (m *MockEmployer) UpdateLogo(arg0 context.Context, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLogo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLogo indicates an expected call of UpdateLogo.
func (mr *MockEmployerMockRecorder) UpdateLogo(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogo", reflect.TypeOf((*MockEmployer)(nil).UpdateLogo), arg0, arg1, arg2)
}

// UpdateProfile mocks base method.
func (m *MockEmployer) UpdateProfile(arg0 context.Context, arg1 int, arg2 *dto.EmployerProfileUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockEmployerMockRecorder) UpdateProfile(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockEmployer)(nil).UpdateProfile), arg0, arg1, arg2)
}
