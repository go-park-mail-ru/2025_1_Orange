basePath: /api/v1
definitions:
  dto.ApplicantProfileResponse:
    properties:
      avatar_path:
        type: string
      birth_date:
        type: string
      city:
        type: string
      created_at:
        type: string
      email:
        type: string
      facebook:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      middle_name:
        type: string
      quote:
        type: string
      sex:
        type: string
      status:
        type: string
      telegram:
        type: string
      updated_at:
        type: string
      vk:
        type: string
    type: object
  dto.ApplicantProfileUpdate:
    properties:
      birth_date:
        type: string
      city:
        type: string
      facebook:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      middle_name:
        type: string
      quote:
        type: string
      sex:
        type: string
      status:
        type: string
      telegram:
        type: string
      vk:
        type: string
    type: object
  dto.ApplicantRegister:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  dto.AuthResponse:
    properties:
      role:
        type: string
      user_id:
        type: integer
    type: object
  dto.ChatResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      resume:
        $ref: '#/definitions/dto.ResumeChatResponse'
      updated_at:
        type: string
      vacancy:
        $ref: '#/definitions/dto.VacancyChatResponse'
    type: object
  dto.ChatShortResponse:
    properties:
      id:
        type: integer
      user:
        $ref: '#/definitions/dto.ChatUserPreview'
      vacancy_title:
        type: string
    type: object
  dto.ChatUserPreview:
    properties:
      avatar_path:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.CreateResumeRequest:
    properties:
      about_me:
        type: string
      additional_specializations:
        items:
          type: string
        type: array
      education:
        $ref: '#/definitions/entity.EducationType'
      educational_institution:
        type: string
      graduation_year:
        type: string
      profession:
        type: string
      skills:
        items:
          type: string
        type: array
      specialization:
        type: string
      work_experiences:
        items:
          $ref: '#/definitions/dto.WorkExperienceDTO'
        type: array
    type: object
  dto.DeleteResumeResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.DeleteVacancy:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.EmailExistsRequest:
    properties:
      email:
        type: string
    type: object
  dto.EmailExistsResponse:
    properties:
      exists:
        type: boolean
      role:
        type: string
    type: object
  dto.EmployerProfileResponse:
    properties:
      company_name:
        type: string
      created_at:
        type: string
      description:
        type: string
      email:
        type: string
      facebook:
        type: string
      id:
        type: integer
      legal_address:
        type: string
      logo_path:
        type: string
      slogan:
        type: string
      telegram:
        type: string
      updated_at:
        type: string
      vk:
        type: string
      website:
        type: string
    type: object
  dto.EmployerProfileUpdate:
    properties:
      company_name:
        type: string
      description:
        type: string
      facebook:
        type: string
      legal_address:
        type: string
      slogan:
        type: string
      telegram:
        type: string
      vk:
        type: string
      website:
        type: string
    type: object
  dto.EmployerRegister:
    properties:
      company_name:
        type: string
      email:
        type: string
      legal_address:
        type: string
      password:
        type: string
    type: object
  dto.Login:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.MessageResponse:
    properties:
      avatar:
        type: string
      chat_id:
        type: integer
      from_applicant:
        type: boolean
      id:
        type: integer
      payload:
        type: string
      receiver_id:
        type: integer
      sender_id:
        type: integer
      sent_at:
        type: string
    type: object
  dto.ResumeApplicantShortResponse:
    properties:
      applicant:
        $ref: '#/definitions/dto.ApplicantProfileResponse'
      applicant_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      profession:
        type: string
      skills:
        description: Добавлено поле навыков
        items:
          type: string
        type: array
      specialization:
        type: string
      updated_at:
        type: string
      work_experiences:
        $ref: '#/definitions/dto.WorkExperienceShort'
    type: object
  dto.ResumeChatResponse:
    properties:
      applicant_id:
        type: integer
      avatar_path:
        type: string
      id:
        type: integer
      profession:
        type: string
    type: object
  dto.ResumeResponse:
    properties:
      about_me:
        type: string
      additional_specializations:
        items:
          type: string
        type: array
      applicant_id:
        type: integer
      created_at:
        type: string
      education:
        $ref: '#/definitions/entity.EducationType'
      educational_institution:
        type: string
      graduation_year:
        type: string
      id:
        type: integer
      profession:
        type: string
      skills:
        items:
          type: string
        type: array
      specialization:
        type: string
      updated_at:
        type: string
      work_experiences:
        items:
          $ref: '#/definitions/dto.WorkExperienceResponse'
        type: array
    type: object
  dto.ResumeShortResponse:
    properties:
      applicant:
        allOf:
        - $ref: '#/definitions/dto.ApplicantProfileResponse'
        description: Add applicant information
      applicant_id:
        description: Keep for backward compatibility
        type: integer
      created_at:
        type: string
      id:
        type: integer
      profession:
        type: string
      specialization:
        type: string
      updated_at:
        type: string
      work_experiences:
        $ref: '#/definitions/dto.WorkExperienceShort'
    type: object
  dto.SearchBySpecializationsRequest:
    properties:
      specializations:
        items:
          type: string
        type: array
    type: object
  dto.SpecializationNamesResponse:
    properties:
      specializations:
        items:
          type: string
        type: array
    type: object
  dto.SpecializationSalaryRange:
    properties:
      avgSalary:
        type: integer
      id:
        type: integer
      maxSalary:
        type: integer
      minSalary:
        type: integer
      name:
        type: string
    type: object
  dto.SpecializationSalaryRangesResponse:
    properties:
      specializations:
        items:
          $ref: '#/definitions/dto.SpecializationSalaryRange'
        type: array
    type: object
  dto.UpdateResumeRequest:
    properties:
      about_me:
        type: string
      additional_specializations:
        items:
          type: string
        type: array
      education:
        $ref: '#/definitions/entity.EducationType'
      educational_institution:
        type: string
      graduation_year:
        type: string
      profession:
        type: string
      skills:
        items:
          type: string
        type: array
      specialization:
        type: string
      work_experiences:
        items:
          $ref: '#/definitions/dto.WorkExperienceDTO'
        type: array
    type: object
  dto.UploadStaticResponse:
    properties:
      id:
        type: integer
      path:
        type: string
    type: object
  dto.VacancyChatResponse:
    properties:
      employer_id:
        type: integer
      id:
        type: integer
      logo_path:
        type: string
      title:
        type: string
    type: object
  dto.VacancyCreate:
    properties:
      city:
        type: string
      description:
        type: string
      employment:
        type: string
      experience:
        type: string
      optional_requirements:
        type: string
      requirements:
        type: string
      salary_from:
        type: integer
      salary_to:
        type: integer
      schedule:
        type: string
      skills:
        items:
          type: string
        type: array
      specialization:
        type: string
      tasks:
        type: string
      taxes_included:
        type: boolean
      title:
        type: string
      work_format:
        type: string
      working_hours:
        type: integer
    type: object
  dto.VacancyResponse:
    properties:
      city:
        type: string
      created_at:
        type: string
      description:
        type: string
      employer_id:
        type: integer
      employment:
        type: string
      experience:
        type: string
      id:
        type: integer
      liked:
        type: boolean
      optional_requirements:
        type: string
      requirements:
        type: string
      responded:
        type: boolean
      salary_from:
        type: integer
      salary_to:
        type: integer
      schedule:
        type: string
      skills:
        items:
          type: string
        type: array
      specialization:
        type: string
      tasks:
        type: string
      taxes_included:
        type: boolean
      title:
        type: string
      updated_at:
        type: string
      work_format:
        type: string
      working_hours:
        type: integer
    type: object
  dto.VacancyShortResponse:
    properties:
      city:
        type: string
      created_at:
        type: string
      employer:
        $ref: '#/definitions/dto.EmployerProfileResponse'
      employment:
        type: string
      id:
        type: integer
      liked:
        type: boolean
      responded:
        type: boolean
      salary_from:
        type: integer
      salary_to:
        type: integer
      specialization:
        type: string
      taxes_included:
        type: boolean
      title:
        type: string
      updated_at:
        type: string
      work_format:
        type: string
      working_hours:
        type: integer
    type: object
  dto.VacancyUpdate:
    properties:
      city:
        type: string
      description:
        type: string
      employment:
        type: string
      experience:
        type: string
      optional_requirements:
        type: string
      requirements:
        type: string
      salary_from:
        type: integer
      salary_to:
        type: integer
      schedule:
        type: string
      skills:
        items:
          type: string
        type: array
      specialization:
        type: string
      tasks:
        type: string
      taxes_included:
        type: boolean
      title:
        type: string
      work_format:
        type: string
      working_hours:
        type: integer
    type: object
  dto.WorkExperienceDTO:
    properties:
      achievements:
        type: string
      duties:
        type: string
      employer_name:
        type: string
      end_date:
        type: string
      position:
        type: string
      start_date:
        type: string
      until_now:
        type: boolean
    type: object
  dto.WorkExperienceResponse:
    properties:
      achievements:
        type: string
      duties:
        type: string
      employer_name:
        type: string
      end_date:
        type: string
      id:
        type: integer
      position:
        type: string
      start_date:
        type: string
      until_now:
        type: boolean
      updated_at:
        type: string
    type: object
  dto.WorkExperienceShort:
    properties:
      achievements:
        type: string
      duties:
        type: string
      employer_name:
        type: string
      end_date:
        type: string
      id:
        type: integer
      position:
        type: string
      start_date:
        type: string
      until_now:
        type: boolean
    type: object
  entity.EducationType:
    enum:
    - secondary_school
    - incomplete_higher
    - higher
    - bachelor
    - master
    - phd
    type: string
    x-enum-varnames:
    - SecondarySchool
    - IncompleteHigher
    - Higher
    - Bachelor
    - Master
    - PhD
  entity.Notification:
    properties:
      created_at:
        type: string
      id:
        type: integer
      is_viewed:
        type: boolean
      object_id:
        type: integer
      receiver_id:
        type: integer
      receiver_role:
        $ref: '#/definitions/entity.UserRole'
      resume_id:
        type: integer
      sender_id:
        type: integer
      sender_role:
        $ref: '#/definitions/entity.UserRole'
      type:
        $ref: '#/definitions/entity.NotificationType'
    type: object
  entity.NotificationPreview:
    properties:
      applicant_name:
        type: string
      created_at:
        type: string
      employer_name:
        type: string
      id:
        type: integer
      is_viewed:
        type: boolean
      object_id:
        type: integer
      receiver_id:
        type: integer
      resume_id:
        type: integer
      sender_id:
        type: integer
      title:
        type: string
      type:
        $ref: '#/definitions/entity.NotificationType'
    type: object
  entity.NotificationType:
    enum:
    - apply
    - download_resume
    type: string
    x-enum-varnames:
    - ApplyNotificationType
    - DownloadResumeType
  entity.UserRole:
    enum:
    - applicant
    - employer
    type: string
    x-enum-varnames:
    - ApplicantRole
    - EmployerRole
  entity.VacancyLike:
    properties:
      applicant_id:
        type: integer
      id:
        type: integer
      liked_at:
        type: string
      vacancy_id:
        type: integer
    type: object
  utils.APIError:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
info:
  contact: {}
  description: API веб-приложения ResuMatch для поиска работы и сотрудников.
  title: ResuMatch API
  version: 1.0.0
paths:
  /applicant/avatar:
    post:
      consumes:
      - multipart/form-data
      description: Загружает изображение аватара для профиля соискателя. Требует авторизации
        и CSRF-токена.
      parameters:
      - description: Файл изображения (JPEG/PNG, макс. 5MB)
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Информация о файле
          schema:
            $ref: '#/definitions/dto.UploadStaticResponse'
        "400":
          description: Неверный формат файла
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещен
          schema:
            $ref: '#/definitions/utils.APIError'
        "413":
          description: Файл слишком большой
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Ошибка загрузки файла
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      - csrf_token: []
      summary: Загрузить аватар
      tags:
      - Applicant
  /applicant/emailExists:
    post:
      consumes:
      - application/json
      description: Проверяет, есть ли работодатель с таким email
      parameters:
      - description: Email для проверки
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.EmailExistsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EmailExistsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      summary: Проверка email
      tags:
      - Applicant
  /applicant/login:
    post:
      consumes:
      - application/json
      description: Авторизация соискателя. При успешной авторизации отправляет куки
        с сессией.
      parameters:
      - description: Данные для авторизации (email и пароль)
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещен (неверные учетные данные)
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      summary: Авторизация соискателя
      tags:
      - Applicant
  /applicant/profile:
    put:
      consumes:
      - application/json
      description: Обновляет данные профиля соискателя, кроме аватара. Требует авторизации.
      parameters:
      - description: Данные для обновления профиля
        in: body
        name: updateData
        required: true
        schema:
          $ref: '#/definitions/dto.ApplicantProfileUpdate'
      responses:
        "204":
          description: No Content
        "400":
          description: Неверный формат данных
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Нет доступа
          schema:
            $ref: '#/definitions/utils.APIError'
        "409":
          description: Пользователь уже существует
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      - session_cookie: []
      summary: Обновить профиль соискателя
      tags:
      - Applicant
  /applicant/profile/{id}:
    get:
      description: Возвращает профиль соискателя по ID. Требует авторизации. Доступен
        только для владельца профиля.
      parameters:
      - description: ID соискателя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Профиль соискателя
          schema:
            $ref: '#/definitions/dto.ApplicantProfileResponse'
        "400":
          description: Неверный ID
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Нет доступа к этому профилю
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Профиль не найден
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      summary: Получить профиль соискателя
      tags:
      - Applicant
  /applicant/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Данные для регистрации
        in: body
        name: registerData
        required: true
        schema:
          $ref: '#/definitions/dto.ApplicantRegister'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/utils.APIError'
        "409":
          description: Пользователь уже существует
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      summary: Регистрация соискателя
      tags:
      - Applicant
  /auth/isAuth:
    get:
      description: Проверяет авторизован пользователь или нет.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      summary: Проверка авторизации
      tags:
      - Auth
  /auth/logout:
    post:
      description: Завершает текущую сессию пользователя
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      - csrf_token: []
      summary: Выход из системы
      tags:
      - Auth
  /auth/logoutAll:
    post:
      description: Завершает все активные сессии пользователя
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      - csrf_token: []
      summary: Выход со всех устройств
      tags:
      - Auth
  /chat/{id}:
    get:
      description: Получить чат по его идентификатору. Требует авторизации.
      parameters:
      - description: ID чата
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Чат
          schema:
            $ref: '#/definitions/dto.ChatResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Чат не найден
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      summary: Получить чат по ID
      tags:
      - Chat
  /chat/{id}/messages:
    get:
      description: Получить все сообщения из указанного чата. Требует авторизации
        и доступа к чату.
      parameters:
      - description: ID чата
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список сообщений
          schema:
            items:
              $ref: '#/definitions/dto.MessageResponse'
            type: array
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Чат не найден
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      summary: Получить сообщения чата
      tags:
      - Chat
  /chat/user:
    get:
      description: Получить все чаты текущего пользователя. Требует авторизации.
      produces:
      - application/json
      responses:
        "200":
          description: Список чатов
          schema:
            items:
              $ref: '#/definitions/dto.ChatShortResponse'
            type: array
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      summary: Получить чаты пользователя
      tags:
      - Chat
  /chat/vacancy/{id}:
    post:
      description: Создать или получить существующий чат для вакансии. Только для
        соискателей (applicant).
      parameters:
      - description: ID вакансии
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Чат
          schema:
            $ref: '#/definitions/dto.ChatResponse'
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      - session_cookie: []
      summary: Получить чат по вакансии
      tags:
      - Chat
  /employer/emailExists:
    post:
      consumes:
      - application/json
      description: Проверяет, есть ли работодатель с таким email
      parameters:
      - description: Email для проверки
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.EmailExistsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EmailExistsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      summary: Проверка email
      tags:
      - Employer
  /employer/login:
    post:
      consumes:
      - application/json
      description: Авторизация работодателя. При успешной авторизации отправляет куки
        с сессией.
      parameters:
      - description: Данные для авторизации (email и пароль)
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещен (неверные учетные данные)
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      summary: Авторизация работодателя
      tags:
      - Employer
  /employer/logo:
    post:
      consumes:
      - multipart/form-data
      description: Загружает изображение логотипа для профиля работодателя. Требует
        авторизации и CSRF-токена.
      parameters:
      - description: Файл изображения (JPEG/PNG, макс. 5MB)
        in: formData
        name: logo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Информация о файле
          schema:
            $ref: '#/definitions/dto.UploadStaticResponse'
        "400":
          description: Неверный формат файла
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещен
          schema:
            $ref: '#/definitions/utils.APIError'
        "413":
          description: Файл слишком большой
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Ошибка загрузки файла
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      - csrf_token: []
      summary: Загрузить логотип
      tags:
      - Employer
  /employer/profile:
    put:
      consumes:
      - application/json
      description: Обновляет данные профиля работодателя, кроме лого. Требует авторизации.
      parameters:
      - description: Данные для обновления профиля
        in: body
        name: updateData
        required: true
        schema:
          $ref: '#/definitions/dto.EmployerProfileUpdate'
      responses:
        "204":
          description: No Content
        "400":
          description: Неверный формат данных
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Нет доступа
          schema:
            $ref: '#/definitions/utils.APIError'
        "409":
          description: Пользователь уже существует
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      - session_cookie: []
      summary: Обновить профиль работодателя
      tags:
      - Employer
  /employer/profile/{id}:
    get:
      description: Возвращает профиль работодателя по ID. Доступен всем.
      parameters:
      - description: ID работодателя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Профиль работодателя
          schema:
            $ref: '#/definitions/dto.EmployerProfileResponse'
        "400":
          description: Неверный ID
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Профиль не найден
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      summary: Получить профиль работодателя
      tags:
      - Employer
  /employer/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Данные для регистрации
        in: body
        name: registerData
        required: true
        schema:
          $ref: '#/definitions/dto.EmployerRegister'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/utils.APIError'
        "409":
          description: Пользователь уже существует
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      summary: Регистрация работодателя
      tags:
      - Employer
  /notification/clear:
    delete:
      description: Удалить все уведомления пользователя. Требует авторизации.
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      - session_cookie: []
      summary: Удалить все уведомления
      tags:
      - Notification
  /notification/read/{id}:
    put:
      description: Прочитать конкретное уведомление по id. Требует авторизации.
      parameters:
      - description: ID уведомления
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      - session_cookie: []
      summary: Прочитать уведомление
      tags:
      - Notification
  /notification/readAll:
    put:
      description: Прочитать все уведомления пользователя. Требует авторизации.
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      - session_cookie: []
      summary: Прочитать все уведомления
      tags:
      - Notification
  /notification/user:
    get:
      description: Получаем список уведомлений для соискателя или работодателя. Требует
        авторизации.
      produces:
      - application/json
      responses:
        "200":
          description: Список уведомлений
          schema:
            items:
              $ref: '#/definitions/entity.NotificationPreview'
            type: array
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      summary: Получить все уведомления пользователя
      tags:
      - Notification
  /resume/{id}:
    delete:
      description: Удаляет резюме по ID. Доступно только владельцу резюме (соискателю).
        Требует авторизации и CSRF-токена.
      parameters:
      - description: ID резюме
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Результат удаления
          schema:
            $ref: '#/definitions/dto.DeleteResumeResponse'
        "400":
          description: Неверный ID
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещен (не владелец)
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Резюме не найдено
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      - csrf_token: []
      summary: Удаление резюме
      tags:
      - Resume
    get:
      description: Возвращает полную информацию о резюме по его ID. Доступно всем
        авторизованным пользователям.
      parameters:
      - description: ID резюме
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Информация о резюме
          schema:
            $ref: '#/definitions/dto.ResumeResponse'
        "400":
          description: Неверный ID
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Резюме не найдено
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      summary: Получение резюме по ID
      tags:
      - Resume
    put:
      consumes:
      - application/json
      description: Обновляет информацию о резюме. Доступно только владельцу резюме
        (соискателю). Требует авторизации и CSRF-токена.
      parameters:
      - description: ID резюме
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления
        in: body
        name: updateData
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateResumeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Обновленное резюме
          schema:
            $ref: '#/definitions/dto.ResumeResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещен (не владелец)
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Резюме не найдено
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      - csrf_token: []
      summary: Обновление резюме
      tags:
      - Resume
  /resume/all:
    get:
      description: Возвращает список резюме. Для соискателей возвращает только их
        собственные резюме. Для других ролей - все резюме. Требует авторизации.
      parameters:
      - description: Количество резюме на странице
        in: query
        name: limit
        type: integer
      - description: Смещение от начала списка
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список резюме
          schema:
            $ref: '#/definitions/dto.ResumeShortResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      summary: Получение всех резюме
      tags:
      - Resume
  /resume/create:
    post:
      consumes:
      - application/json
      description: Создает новое резюме для авторизованного соискателя. Требует авторизации
        и CSRF-токена.
      parameters:
      - description: Данные для создания резюме
        in: body
        name: resumeData
        required: true
        schema:
          $ref: '#/definitions/dto.CreateResumeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Созданное резюме
          schema:
            $ref: '#/definitions/dto.ResumeResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещен (только для соискателей)
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      - session_cookie: []
      summary: Создание нового резюме
      tags:
      - Resume
  /resume/pdf/{id}:
    get:
      description: |-
        Скачивает резюме по ID в формате PDF. Требует авторизации.
        При успешном скачивании отправляет уведомление владельцу резюме через WebSocket.
      parameters:
      - description: ID резюме
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/pdf
      responses:
        "200":
          description: PDF-файл резюме
          headers:
            Content-Disposition:
              description: attachment; filename=resume.pdf
              type: string
            Content-Type:
              description: application/pdf
              type: string
          schema:
            type: file
        "400":
          description: Неверный ID резюме
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Резюме не найдено
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Ошибка генерации PDF
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      summary: Получить резюме в формате PDF
      tags:
      - Resume
  /resume/search:
    get:
      description: Ищет резюме по профессии. Для соискателей возвращает только их
        собственные резюме. Для других ролей - все резюме. Требует авторизации.
      parameters:
      - description: Строка поиска по профессии
        in: query
        name: profession
        required: true
        type: string
      - description: Количество резюме на странице
        in: query
        name: limit
        type: integer
      - description: Смещение от начала списка
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список найденных резюме
          schema:
            items:
              $ref: '#/definitions/dto.ResumeShortResponse'
            type: array
        "400":
          description: Неверные параметры запроса
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      summary: Поиск резюме по профессии
      tags:
      - Resume
  /specialization/all:
    get:
      description: Возвращает список имен всех специализаций без ID
      produces:
      - application/json
      responses:
        "200":
          description: Список имен специализаций
          schema:
            $ref: '#/definitions/dto.SpecializationNamesResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      summary: Получение списка всех специализаций
      tags:
      - Specialization
  /specialization/salaries:
    get:
      description: Возвращает минимальную, максимальную и среднюю зарплату для каждой
        специализации
      produces:
      - application/json
      responses:
        "200":
          description: Вилки зарплат по специализациям
          schema:
            $ref: '#/definitions/dto.SpecializationSalaryRangesResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      summary: Получение вилок зарплат по специализациям
      tags:
      - Specialization
  /vacancy/applicant/{id}/liked:
    get:
      consumes:
      - application/json
      description: Отдает список понравившихся вакансий для авторизованного соискателя.
        Требует авторизации и CSRF-токена.
      parameters:
      - description: Количество вакансий на странице
        in: query
        name: limit
        type: integer
      - description: Смещение от начала списка
        in: query
        name: offset
        type: integer
      - description: id работодателя
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Список вакансий
          schema:
            $ref: '#/definitions/dto.VacancyShortResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещен (только для соискателей)
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      - session_cookie: []
      summary: Получение списка понравившихся вакансии
      tags:
      - Vacancy
  /vacancy/applicant/{id}/vacancies:
    get:
      consumes:
      - application/json
      description: Получаем все вакансии на которые откликнулся соискатель для авторизованного
        соискателя. Требует авторизации и CSRF-токена.
      parameters:
      - description: Количество вакансий на странице
        in: query
        name: limit
        type: integer
      - description: Смещение от начала списка
        in: query
        name: offset
        type: integer
      - description: id работодателя
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Полученная вакансия
          schema:
            $ref: '#/definitions/dto.VacancyShortResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещен (только для соискателя)
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      - session_cookie: []
      summary: Получение всех вакансий на которые откликнулся соискатель
      tags:
      - Vacancy
  /vacancy/employer/{id}/vacancies:
    get:
      consumes:
      - application/json
      description: Получаем все активные вакансии работодателя для авторизованного
        соискателя. Требует авторизации и CSRF-токена.
      parameters:
      - description: Количество вакансий на странице
        in: query
        name: limit
        type: integer
      - description: Смещение от начала списка
        in: query
        name: offset
        type: integer
      - description: id вакансии
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Полученная вакансия
          schema:
            $ref: '#/definitions/dto.VacancyShortResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещен (только для соискателя)
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      - session_cookie: []
      summary: Получение всех активных вакансий роботодателя
      tags:
      - Vacancy
  /vacancy/search:
    get:
      description: Ищет вакансии по заданному запросу. Поиск выполняется по названию
        должности, специализации и названию компании. Для работодателей возвращает
        только их собственные вакансии. Для других ролей - все вакансии.
      parameters:
      - description: Строка поиска
        in: query
        name: query
        required: true
        type: string
      - description: Количество вакансий на странице
        in: query
        name: limit
        type: integer
      - description: Смещение от начала списка
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список найденных вакансий
          schema:
            items:
              $ref: '#/definitions/dto.VacancyShortResponse'
            type: array
        "400":
          description: Неверные параметры запроса
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      summary: Поиск вакансий
      tags:
      - Vacancy
  /vacancy/search/combined:
    get:
      consumes:
      - application/json
      description: Ищет вакансию по параметру для авторизованного соискателя. Требует
        авторизации и CSRF-токена.
      parameters:
      - description: Параметр поиска вакансии
        in: body
        name: searchQuery
        required: true
        schema:
          type: string
      - description: Количество вакансий на странице
        in: query
        name: limit
        type: integer
      - description: Смещение от начала списка
        in: query
        name: offset
        type: integer
      - description: Специализация для поиска вакансии
        in: body
        name: specsParam
        required: true
        schema:
          type: string
      - description: Тип занятости для поиска вакансии
        in: body
        name: minSalaryStr
        required: true
        schema:
          type: string
      - description: Специализация для поиска вакансии
        in: body
        name: empParam
        required: true
        schema:
          type: string
      - description: Опыт работы для поиска вакансии
        in: body
        name: expParam
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Найденная вакансия
          schema:
            $ref: '#/definitions/dto.VacancyShortResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещен (только для соискателей)
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      - session_cookie: []
      summary: Поиск вакансии по параметру
      tags:
      - Vacancy
  /vacancy/search/specializations:
    post:
      consumes:
      - application/json
      description: Ищет вакансию по специализации для авторизованного соискателя.
        Требует авторизации и CSRF-токена.
      parameters:
      - description: Данные для поиска вакансии
        in: body
        name: searchRequest
        required: true
        schema:
          $ref: '#/definitions/dto.SearchBySpecializationsRequest'
      - description: Количество вакансий на странице
        in: query
        name: limit
        type: integer
      - description: Смещение от начала списка
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Найденная вакансия
          schema:
            $ref: '#/definitions/dto.VacancyShortResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещен (только для соискателей)
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      - session_cookie: []
      summary: Поиск вакансии по спецализации
      tags:
      - Vacancy
  /vacancy/vacancies:
    get:
      description: Возвращает список вакансий. Для работодателей возвращает только
        их собственные вакансии. Для других ролей - все вакансии. Требует авторизации.
      parameters:
      - description: Количество вакансий на странице
        in: query
        name: limit
        type: integer
      - description: Смещение от начала списка
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список вакансий
          schema:
            $ref: '#/definitions/dto.VacancyShortResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      summary: Получение всех вакансий
      tags:
      - Vacancy
    post:
      consumes:
      - application/json
      description: Создает новую вакансию для авторизованного соискателя. Требует
        авторизации и CSRF-токена.
      parameters:
      - description: Данные для создания вакансии
        in: body
        name: vacancyCreate
        required: true
        schema:
          $ref: '#/definitions/dto.VacancyCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Созданная вакансия
          schema:
            $ref: '#/definitions/dto.VacancyResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещен (только для работодателей)
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      - session_cookie: []
      summary: Создание новой вакансии
      tags:
      - Vacancy
  /vacancy/vacancy/{id}:
    delete:
      description: Удаляет вакансию по ID. Доступно только владельцу вакансии (работодателю).
        Требует авторизации и CSRF-токена.
      parameters:
      - description: ID вакансии
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Результат удаления
          schema:
            $ref: '#/definitions/dto.DeleteVacancy'
        "400":
          description: Неверный ID
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещен (не владелец)
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Вакансия не найдена
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      - csrf_token: []
      summary: Удаление вакансии
      tags:
      - Vacancy
    get:
      description: Возвращает полную информацию о вакансии по его ID. Доступно всем
        авторизованным пользователям.
      parameters:
      - description: ID вакансии
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Информация о резюме
          schema:
            $ref: '#/definitions/dto.VacancyResponse'
        "400":
          description: Неверный ID
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Вакансия не найдена
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      summary: Получение вакансии по ID
      tags:
      - Vacancy
    put:
      consumes:
      - application/json
      description: Обновляет информацию о вакансии. Доступно только владельцу вакансии
        (работодателю). Требует авторизации и CSRF-токена.
      parameters:
      - description: ID вакансии
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления
        in: body
        name: vacancyUpdate
        required: true
        schema:
          $ref: '#/definitions/dto.VacancyUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Обновленная вакансия
          schema:
            $ref: '#/definitions/dto.VacancyResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещен (не владелец)
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Вакансия не найдена
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - session_cookie: []
      - csrf_token: []
      summary: Обновление вакансии
      tags:
      - Vacancy
  /vacancy/vacancy/{id}/like:
    post:
      consumes:
      - application/json
      description: Создает лайк на вакансию для авторизованного соискателя. Требует
        авторизации и CSRF-токена.
      parameters:
      - description: id вакансии
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Созданный лайк
          schema:
            $ref: '#/definitions/entity.VacancyLike'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещен (только для соискателей)
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      - session_cookie: []
      summary: Создание лайка для вакансии
      tags:
      - Vacancy
  /vacancy/vacancy/{id}/response/{resume_id}:
    post:
      consumes:
      - application/json
      description: Создает отклик на вакансию для авторизованного соискателя. Требует
        авторизации и CSRF-токена.
      parameters:
      - description: ID вакансии
        in: path
        name: id
        required: true
        type: integer
      - description: ID резюме
        in: path
        name: resume_id
        required: true
        type: integer
      - description: Данные для создания отклика
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/entity.Notification'
      produces:
      - application/json
      responses:
        "201":
          description: Созданное резюме
          schema:
            $ref: '#/definitions/dto.VacancyResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещен (только для работодателей)
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      - session_cookie: []
      summary: Отклик на вакансию
      tags:
      - Vacancy
  /vacancy/vacancy/{id}/response/list:
    get:
      consumes:
      - application/json
      description: Получаем все резюме которыми откликнулись на вакансии роботодателя
        для авторизованного соискателя. Требует авторизации и CSRF-токена.
      parameters:
      - description: id вакансии
        in: path
        name: id
        type: integer
      - description: Количество резюме на странице
        in: query
        name: limit
        type: integer
      - description: Смещение от начала списка
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Полученные резюме
          schema:
            $ref: '#/definitions/dto.ResumeApplicantShortResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.APIError'
        "403":
          description: Доступ запрещен (только для соискателя)
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - csrf_token: []
      - session_cookie: []
      summary: Получение всех резюме которыми откликнулись на вакансии роботодателя
      tags:
      - Vacancy
securityDefinitions:
  csrf_token:
    in: header
    name: X-CSRF-Token
    type: apiKey
  session_cookie:
    in: cookie
    name: session_id
    type: apiKey
swagger: "2.0"
