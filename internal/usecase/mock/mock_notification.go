// Code generated by MockGen. DO NOT EDIT.
// Source: ResuMatch/internal/usecase (interfaces: Notification)
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/usecase/mock/mock_notification.go ResuMatch/internal/usecase Notification
//

// Package mock is a generated GoMock package.
package mock

import (
	entity "ResuMatch/internal/entity"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNotification is a mock of Notification interface.
type MockNotification struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationMockRecorder
	isgomock struct{}
}

// MockNotificationMockRecorder is the mock recorder for MockNotification.
type MockNotificationMockRecorder struct {
	mock *MockNotification
}

// NewMockNotification creates a new mock instance.
func NewMockNotification(ctrl *gomock.Controller) *MockNotification {
	mock := &MockNotification{ctrl: ctrl}
	mock.recorder = &MockNotificationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotification) EXPECT() *MockNotificationMockRecorder {
	return m.recorder
}

// CreateNotification mocks base method.
func (m *MockNotification) CreateNotification(ctx context.Context, notification *entity.Notification) (*entity.NotificationPreview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", ctx, notification)
	ret0, _ := ret[0].(*entity.NotificationPreview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockNotificationMockRecorder) CreateNotification(ctx, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockNotification)(nil).CreateNotification), ctx, notification)
}

// DeleteAllNotifications mocks base method.
func (m *MockNotification) DeleteAllNotifications(ctx context.Context, userID int, role string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllNotifications", ctx, userID, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllNotifications indicates an expected call of DeleteAllNotifications.
func (mr *MockNotificationMockRecorder) DeleteAllNotifications(ctx, userID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllNotifications", reflect.TypeOf((*MockNotification)(nil).DeleteAllNotifications), ctx, userID, role)
}

// GetNotificationsForUser mocks base method.
func (m *MockNotification) GetNotificationsForUser(ctx context.Context, userID int, role string) ([]*entity.NotificationPreview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationsForUser", ctx, userID, role)
	ret0, _ := ret[0].([]*entity.NotificationPreview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationsForUser indicates an expected call of GetNotificationsForUser.
func (mr *MockNotificationMockRecorder) GetNotificationsForUser(ctx, userID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationsForUser", reflect.TypeOf((*MockNotification)(nil).GetNotificationsForUser), ctx, userID, role)
}

// ReadAllNotifications mocks base method.
func (m *MockNotification) ReadAllNotifications(ctx context.Context, userID int, role string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllNotifications", ctx, userID, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadAllNotifications indicates an expected call of ReadAllNotifications.
func (mr *MockNotificationMockRecorder) ReadAllNotifications(ctx, userID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllNotifications", reflect.TypeOf((*MockNotification)(nil).ReadAllNotifications), ctx, userID, role)
}

// ReadNotification mocks base method.
func (m *MockNotification) ReadNotification(ctx context.Context, notificationID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNotification", ctx, notificationID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadNotification indicates an expected call of ReadNotification.
func (mr *MockNotificationMockRecorder) ReadNotification(ctx, notificationID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNotification", reflect.TypeOf((*MockNotification)(nil).ReadNotification), ctx, notificationID, userID)
}
