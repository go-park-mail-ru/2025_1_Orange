// Code generated by MockGen. DO NOT EDIT.
// Source: ResuMatch/internal/usecase (interfaces: ResumeUsecase)
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/usecase/mock/mock_resume.go ResuMatch/internal/usecase ResumeUsecase
//

// Package mock is a generated GoMock package.
package mock

import (
	entity "ResuMatch/internal/entity"
	dto "ResuMatch/internal/entity/dto"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockResumeUsecase is a mock of ResumeUsecase interface.
type MockResumeUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockResumeUsecaseMockRecorder
	isgomock struct{}
}

// MockResumeUsecaseMockRecorder is the mock recorder for MockResumeUsecase.
type MockResumeUsecaseMockRecorder struct {
	mock *MockResumeUsecase
}

// NewMockResumeUsecase creates a new mock instance.
func NewMockResumeUsecase(ctrl *gomock.Controller) *MockResumeUsecase {
	mock := &MockResumeUsecase{ctrl: ctrl}
	mock.recorder = &MockResumeUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResumeUsecase) EXPECT() *MockResumeUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockResumeUsecase) Create(ctx context.Context, applicantID int, request *dto.CreateResumeRequest) (*dto.ResumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, applicantID, request)
	ret0, _ := ret[0].(*dto.ResumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockResumeUsecaseMockRecorder) Create(ctx, applicantID, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResumeUsecase)(nil).Create), ctx, applicantID, request)
}

// Delete mocks base method.
func (m *MockResumeUsecase) Delete(ctx context.Context, id, applicantID int) (*dto.DeleteResumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, applicantID)
	ret0, _ := ret[0].(*dto.DeleteResumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockResumeUsecaseMockRecorder) Delete(ctx, id, applicantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResumeUsecase)(nil).Delete), ctx, id, applicantID)
}

// GetAll mocks base method.
func (m *MockResumeUsecase) GetAll(ctx context.Context, limit, offset int) ([]dto.ResumeShortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, limit, offset)
	ret0, _ := ret[0].([]dto.ResumeShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockResumeUsecaseMockRecorder) GetAll(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockResumeUsecase)(nil).GetAll), ctx, limit, offset)
}

// GetAllResumesByApplicantID mocks base method.
func (m *MockResumeUsecase) GetAllResumesByApplicantID(ctx context.Context, applicantID, limit, offset int) ([]dto.ResumeApplicantShortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllResumesByApplicantID", ctx, applicantID, limit, offset)
	ret0, _ := ret[0].([]dto.ResumeApplicantShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllResumesByApplicantID indicates an expected call of GetAllResumesByApplicantID.
func (mr *MockResumeUsecaseMockRecorder) GetAllResumesByApplicantID(ctx, applicantID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllResumesByApplicantID", reflect.TypeOf((*MockResumeUsecase)(nil).GetAllResumesByApplicantID), ctx, applicantID, limit, offset)
}

// GetByID mocks base method.
func (m *MockResumeUsecase) GetByID(ctx context.Context, id int) (*dto.ResumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*dto.ResumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockResumeUsecaseMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockResumeUsecase)(nil).GetByID), ctx, id)
}

// GetResumePDF mocks base method.
func (m *MockResumeUsecase) GetResumePDF(ctx context.Context, resumeID, userID int) ([]byte, *entity.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResumePDF", ctx, resumeID, userID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*entity.Notification)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetResumePDF indicates an expected call of GetResumePDF.
func (mr *MockResumeUsecaseMockRecorder) GetResumePDF(ctx, resumeID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResumePDF", reflect.TypeOf((*MockResumeUsecase)(nil).GetResumePDF), ctx, resumeID, userID)
}

// SearchResumesByProfession mocks base method.
func (m *MockResumeUsecase) SearchResumesByProfession(ctx context.Context, userID int, role, profession string, limit, offset int) ([]dto.ResumeShortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchResumesByProfession", ctx, userID, role, profession, limit, offset)
	ret0, _ := ret[0].([]dto.ResumeShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchResumesByProfession indicates an expected call of SearchResumesByProfession.
func (mr *MockResumeUsecaseMockRecorder) SearchResumesByProfession(ctx, userID, role, profession, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchResumesByProfession", reflect.TypeOf((*MockResumeUsecase)(nil).SearchResumesByProfession), ctx, userID, role, profession, limit, offset)
}

// Update mocks base method.
func (m *MockResumeUsecase) Update(ctx context.Context, id, applicantID int, request *dto.UpdateResumeRequest) (*dto.ResumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, applicantID, request)
	ret0, _ := ret[0].(*dto.ResumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockResumeUsecaseMockRecorder) Update(ctx, id, applicantID, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockResumeUsecase)(nil).Update), ctx, id, applicantID, request)
}
